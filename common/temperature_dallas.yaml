substitutions:
  dallasPin: "16"  # Broche pour capteur de température Dallas DS18B20
  update_temp: "60s"  # Intervalle de mise à jour des capteurs de température

  # Variables de calibration des températures
  cal_0: "0.0"  # Point de calibration bas à 0°C (eau glacée)
  cal_100: "100.0"  # Point de calibration haut à 100°C (eau bouillante)
  plage_correct: "22.0"  # Valeur par défaut de la plage correcte (modifie si besoin)
  plage_chaude: "28.0"  # Valeur par défaut de la plage chaude

  sorting_group_temperature_weight: "10"  # Poids de tri du groupe de température dans l'interface web

web_server:
  sorting_groups:
    - id: sorting_group_temperature  # Groupe des capteurs de température
      name: "Temperature"  # Nom affiché du groupe température
      sorting_weight: ${sorting_group_temperature_weight}

one_wire:
  - platform: gpio  # Activation du protocole 1-Wire sur broche GPIO
    pin: ${dallasPin}

sensor:
  - platform: dallas_temp  # Capteur de température Dallas DS18B20
    id: temp_1
    icon: mdi:thermometer-water
    name: "Temperature"
    state_class: "measurement"
    device_class: "temperature"
    update_interval: "${update_temp}"
    filters:
      - calibrate_linear:  # Calibration linéaire basée sur points de référence
          method: least_squares
          datapoints:
            - 0.0 -> ${cal_0}
            - 100.0 -> ${cal_100}
    on_value: 
      then:
        - component.update: temp_range
    web_server:
      sorting_group_id: sorting_group_temperature
      sorting_weight: 10

binary_sensor:
  - platform: template  # Indique si la température est dans la plage idéale
    name: Ideal Temperature
    id: ideal_temp
    icon: mdi:thermometer-check
    lambda: |-
      return id(temp_range).state == "OK";
    web_server:
      sorting_group_id: sorting_group_temperature

text_sensor:
  - platform: template  # Indique la plage actuelle de température (Cool, OK, Warm)
    name: Temperature Range
    id: temp_range
    icon: mdi:thermometer-alert
    update_interval: "${update_temp}"
    lambda: |-
      if (id(temp_f).state <= id(plage_correct).state) {
        return {"Cool"};
      } else if (id(temp_f).state >= id(plage_chaude).state) {
        return {"Chaud"};
      } else if (id(temp_f).state > id(plage_correct).state && id(temp_f).state < id(plage_chaude).state) {
        return {"OK"};
      } else {
        return {"Inconnu"};
      }
    web_server:
      sorting_group_id: sorting_group_temperature
      sorting_weight: 12

number:
  - platform: template  # Réglage du seuil inférieur de température (Cool)
    name: "Temp. Cool"
    id: plage_correct
    icon: mdi:thermometer-low
    optimistic: true
    mode: box
    min_value: 0.0
    max_value: 100.0
    step: 0.5
    restore_value: True
    initial_value: ${plage_correct}
    entity_category: "Config"
    device_class: "temperature"
    on_value: 
      then:
        - component.update: temp_range
    web_server:
      sorting_group_id: sorting_group_temperature

  - platform: template  # Réglage du seuil supérieur de température (Warm)
    name: "Temp. Warm"
    icon: mdi:thermometer-high
    id: plage_chaude
    optimistic: true
    mode: box
    min_value: 0.0
    max_value: 100.0
    step: 0.5
    restore_value: True
    initial_value: ${plage_chaude}
    entity_category: "Config"
    device_class: "temperature"
    on_value: 
      then:
        - component.update: temp_range
    web_server:
      sorting_group_id: sorting_group_temperature
