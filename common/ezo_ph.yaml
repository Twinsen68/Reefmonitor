substitutions:
  addPH: "99"  # Adresse I2C du circuit pH
  update_ph: "60s"  # Intervalle de mise à jour des valeurs pH
  sorting_group_ph: '30'  # Poids pour trier le groupe pH dans l'interface web

web_server:
  sorting_groups:
    - id: sorting_group_ph  # Groupe des capteurs pH
      name: "pH - EZO"  # Nom affiché du groupe pH
      sorting_weight: ${sorting_group_ph}  # Poids de tri du groupe pH

api:
  actions: 
    - action: ph_change_address  # Changer l'adresse I2C du capteur pH
      variables:
        address: int
      then:
        - lambda: |-
            id(ph_ezo).send_custom("I2C,{{address}}");
    - action: ph_custom_command  # Envoi d'une commande personnalisée au capteur pH
      variables:
        command: string
      then:
        - lambda: |-
            id(ph_ezo).send_custom({{command}});
    - action: ph_read_continous  # Lecture continue de la sonde pH pendant 60 secondes
      then:
        - repeat:
            count: 60
            then:
              - button.press: read_ph
              - delay: 1s
    - action: ph_calibrate_mid_7  # Calibration médiane du capteur pH à 7.00
      then:
        - lambda: |-
            id(ph_ezo).set_calibration_point_mid(7.00);
    - action: ph_calibrate_low_4  # Calibration basse du capteur pH à 4.00
      then:
        - lambda: |-
            id(ph_ezo).set_calibration_point_low(4.00);
    - action: ph_calibrate_high_10  # Calibration haute du capteur pH à 10.00
      then:
        - lambda: |-
            id(ph_ezo).set_calibration_point_high(10.00);
    - action: ph_calibrate_high_1001  # Calibration haute du capteur pH à 10.01
      then:
        - lambda: |-
            id(ph_ezo).set_calibration_point_high(10.01);

esphome:
  on_boot:  # Actions exécutées au démarrage
    priority: 800
    then:
      - button.press: send_selected_ph

sensor:
  - platform: ezo  # Capteur pH EZO
    icon: mdi:ph
    name: "pH"
    id: ph_ezo
    address: ${addPH}
    unit_of_measurement: ""
    accuracy_decimals: 2
    update_interval: "${update_ph}"
    state_class: "measurement"
    device_class: "PH"
    on_custom: 
      then:
        - lambda: 
            id(result_ph).publish_state(x);
    on_calibration: 
      then:
        - lambda: 
            id(result_ph).publish_state(x);
    on_device_information: 
      then:
        - lambda: 
            id(result_ph).publish_state(x);
    on_slope: 
      then:
        - lambda: 
            id(result_ph).publish_state(x);
    on_t: 
      then:
        - lambda: 
            id(result_ph).publish_state(x);
    web_server:
      sorting_group_id: sorting_group_ph
      sorting_weight: 10

text_sensor:
  - platform: template  # Résultat des commandes envoyées à la sonde pH
    name: pH - Cmd Résultat
    icon: mdi:data-matrix
    id: result_ph
    web_server:
      sorting_group_id: sorting_group_ph

button:
  - platform: template  # Bouton pour déclencher la lecture du capteur pH
    name: pH - Lire
    id: read_ph
    icon: mdi:read
    entity_category: "Config"
    on_press:
      then:
        - lambda: |-
            byte error;
            Wire.beginTransmission(${addPH});
            error = Wire.endTransmission();
            if (error == 0) {
              id(ph_ezo).send_custom("R");
            } else {
              ESP_LOGW("custom_ph_read", "No pH sensor detected at address: ${addPH}!!");
            }
    web_server:
      sorting_group_id: sorting_group_ph

  - platform: template
    name: pH - Envoi Cmd
    id: send_selected_ph
    entity_category: "Config"
    icon: mdi:apple-keyboard-command
    # disabled_by_default: true
    on_press:
      then:
        - lambda: |-
            if (id(select_command_ph).state == "Lire") {
              id(ph_ezo).send_custom("R");
            }
            // Get Device Firmware Version
            if (id(select_command_ph).state == "Information") {
              id(ph_ezo).get_device_information();
            }
            if (id(select_command_ph).state == "Status") {
              id(ph_ezo).send_custom("Status");
            }
            if (id(select_command_ph).state == "Obt courbe") {
              id(ph_ezo).get_slope();
            }
            if (id(select_command_ph).state == "Vérif calibration") {
              id(ph_ezo).get_calibration();
            }  
            if (id(select_command_ph).state == "Calibrate @ MOY = 7 ") {
              id(ph_ezo).set_calibration_point_mid(7.00);
            }
            if (id(select_command_ph).state == "Calibrate @ BASSE = 4 ") {
              id(ph_ezo).set_calibration_point_low(4.00);
            }
            if (id(select_command_ph).state == "Calibrate @ HAUTE = 10 ") {
              id(ph_ezo).set_calibration_point_high(10.00);
            }
            if (id(select_command_ph).state == "Calibrate @ HAUTE = 10.01 ") {
              id(ph_ezo).set_calibration_point_high(10.01);
            }
            if (id(select_command_ph).state == "Calibrate CLEAR ") {
              id(ph_ezo).clear_calibration();
            }
            // if (id(select_command_ph).state == "Reset EZO ") {
            //   id(ph_ezo).send_custom("Factory");
            // }
            else {
              id(ph_ezo).send_custom("R");
            }
    web_server:
      sorting_group_id: sorting_group_ph

select:
  - platform: template
    name: pH - Cmd sélectionée
    id: select_command_ph
    icon: mdi:apple-keyboard-command
    optimistic: true
    # disabled_by_default: true
    entity_category: "Config"
    options:
      - "Lire"
      - "Information"
      - "Status"
      - "Obt courbe"
      - "Vérif calibration"
      - "Calibrate @ MOY = 7 "
      - "Calibrate @ BASSE = 4 "
      - "Calibrate @ HAUTE = 10 "
      - "Calibrate @ HAUTE = 10.01 "
      - "Calibrate CLEAR "
      # - "Reset EZO "
    initial_option: "Vérif calibration"
    set_action:
      - logger.log:
          format: "Chosen option: %s"
          args: ["x.c_str()"]
    web_server:
      sorting_group_id: sorting_group_ph