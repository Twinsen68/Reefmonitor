substitutions:
  addEC: "100"  # Adresse I2C du circuit de conductivité (EC)
  update_ec: "60s"  # Intervalle de mise à jour des valeurs de conductivité
  update_button_ec: "60s"  # Intervalle pour appuyer automatiquement sur le bouton de lecture EC

  sorting_group_ec: '31'  # Poids pour trier le groupe EC dans l'interface web

web_server:
  sorting_groups:
    - id: sorting_group_ec  # Groupe des capteurs EC
      name: "Salinity - EZO"  # Nom affiché pour le groupe EC
      sorting_weight: ${sorting_group_ec}  # Poids du tri

api:
  actions: 
    - action: ec_change_address  # Change l'adresse I2C du capteur EC
      variables:
        address: int
      then:
        - lambda: |-
            id(ec_ezo).send_custom("I2C,{{address}}");
    - action: ec_custom_command  # Envoie une commande personnalisée au capteur EC
      variables:
        command: string
      then:
        - lambda: |-
            id(ec_ezo).send_custom({{command}});
    - action: ec_read_continous  # Lecture continue de la sonde EC pendant 60 secondes
      then:
        - repeat:
            count: 60
            then:
              - button.press: read_ec
              - delay: 1s
    - action: ec_calibrate_dry  # Calibration à sec de la sonde EC
      then:
        - lambda: |-
            id(ec_ezo).send_custom("Cal,dry");
    - action: ec_calibrate_low_12880  # Calibration basse à 12880 µS/cm
      then:
        - lambda: |-
            id(ec_ezo).send_custom("Cal,low,12880");
    - action: ec_calibrate_high_80000  # Calibration haute à 80000 µS/cm
      then:
        - lambda: |-
            id(ec_ezo).send_custom("Cal,high,80000");
    - action: ec_output_all_parameters  # Active la sortie de tous les paramètres mesurés
      then:
        - lambda: |-
            id(ec_ezo).send_custom("O,EC,1");
            id(ec_ezo).send_custom("O,TDS,1");
            id(ec_ezo).send_custom("O,S,1");
            id(ec_ezo).send_custom("O,SG,1");

esphome:
  on_boot:  # Actions exécutées au démarrage
    priority: 800
    then:
      - button.press: read_ec
      - button.press: send_selected_ec

interval:
  - interval: "${update_button_ec}"  # Intervalle régulier pour lire le capteur EC
    then:
      - button.press: read_ec

sensor:
  - platform: ezo  # Capteur de conductivité EZO
    icon: mdi:shaker-outline
    name: "Conductivity"
    id: ec_ezo
    address: ${addEC}
    unit_of_measurement: "mS/cm"
    accuracy_decimals: 2
    update_interval: "${update_ec}"
    state_class: "measurement"
    device_class: "volatile_organic_compounds_parts"
    filters:
      - lambda: return (x / 1000);
    web_server:
      sorting_group_id: sorting_group_ec
      sorting_weight: 13

text_sensor:
  - platform: template  # Valeur brute de la mesure EC
    name: EC - Raw Value
    id: raw_value_ec
    icon: mdi:counter
    on_value: 
      then:
        - component.update: ec_ezo
    web_server:
      sorting_group_id: sorting_group_ec

  - platform: template  # Résultat des commandes envoyées à la sonde EC
    name: EC - Command Result
    icon: mdi:data-matrix
    id: result_ec
    web_server:
      sorting_group_id: sorting_group_ec

button:
  - platform: template  # Bouton pour déclencher la lecture du capteur EC
    name: EC - Read
    icon: mdi:read
    id: read_ec
    entity_category: "Config"
    on_press:
      then:
        - lambda: |-
            byte error;
            Wire.beginTransmission(${addEC});
            error = Wire.endTransmission();
            if (error == 0) {
              id(ec_ezo).send_custom("R");
            } else {
              ESP_LOGW("custom_conductivity_read", "No Conductivity sensor detected at address: ${addEC}!");
            }
    web_server:
      sorting_group_id: sorting_group_ec
